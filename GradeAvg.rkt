#lang racket
;Read in our Data as a list with each line being a member of the list.
(define 原本 (port->lines(open-input-file "GradebookData.txt")))
(define 外   (open-output-file #:exists 'replace "output.txt"))

;Accepts a list and returns it in the form: Last, First, Weight Avg, Letter Grade
(define (割り出 リスト)
  ;Returns the weighted average.
  (define (平均)
    ;List with all the text filtered out.
    (define 数 (map string->number (filter string->number (string-split (first リスト)))))

    ;Calculates the weighted average of quizzes.
    (define (クイズ 成績)
      (* (/ (foldl + 0
                成績
                )
         (* 20 (length 成績))) .35)
      )

    ;Calculates the weighted average of the tests.
    (define (テスト　成績)
      (* (/ (foldl + 0
                成績
                )
         (* 100 (length 成績))) .65)
    )

    (+ (クイズ (take 数 5)) (テスト (take-right 数 2)))
  )

  ;Calculates the letter grade.
  (define (成績)
    (cond
      [(>= (平均) .93) "A"]
      [(>= (平均) .90) "A-"]
      [(>= (平均) .87) "B+"]
      [(>= (平均) .83) "B"]
      [(>= (平均) .80) "B-"]
      [(>= (平均) .77) "C+"]
      [(>= (平均) .73) "C"]
      [(>= (平均) .70) "C-"]
      [(>= (平均) .67) "D+"]
      [(>= (平均) .63) "D"]
      [(>= (平均) .60) "D-"]
      ["F"]
      )
    )
  (list (list (second (string-split (first リスト))) (first (string-split (first リスト))) (平均) (成績)))
)

;Creates a list of lists generated by 割り出
(define (作り リスト)
  (if (empty? リスト) '() (append (割り出 (list (first リスト))) (作り (rest リスト))) )
  )

;Makes outputs a pretty list
(define (きれい リスト)
  (define (書く x) (writeln x 外))
  (map 書く リスト)
  )

(きれい (作り 原本))
(close-output-port 外)
